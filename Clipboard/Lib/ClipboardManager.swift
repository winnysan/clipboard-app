import Cocoa

/// Trieda zodpovedn√° za manipul√°ciu so schr√°nkou.
/// Obsahuje funkciu na z√≠skanie oznaƒçen√©ho textu.
class ClipboardManager {
    /// Singleton in≈°tancia triedy
    static let shared = ClipboardManager()

    /// Skop√≠ruje oznaƒçen√Ω text zo syst√©mu a vyp√≠≈°e ho do konzoly.
    func copySelectedText() {
        let pasteboard = NSPasteboard.general
        pasteboard.clearContents() // Vyma≈æe schr√°nku pred kop√≠rovan√≠m

        // Simul√°cia stlaƒçenia Cmd + C na skop√≠rovanie oznaƒçen√©ho textu
        let source = CGEventSource(stateID: .hidSystemState)
        let cmdDown = CGEvent(keyboardEventSource: source, virtualKey: 0x37, keyDown: true) // Command
        let cDown = CGEvent(keyboardEventSource: source, virtualKey: 0x08, keyDown: true) // C
        let cmdUp = CGEvent(keyboardEventSource: source, virtualKey: 0x37, keyDown: false)
        let cUp = CGEvent(keyboardEventSource: source, virtualKey: 0x08, keyDown: false)

        cmdDown?.flags = .maskCommand
        cDown?.flags = .maskCommand

        cmdDown?.post(tap: .cghidEventTap)
        cDown?.post(tap: .cghidEventTap)
        cUp?.post(tap: .cghidEventTap)
        cmdUp?.post(tap: .cghidEventTap)

        // Po kr√°tkom ƒçase preƒç√≠tame obsah schr√°nky
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            if let copiedText = pasteboard.string(forType: .string), !copiedText.isEmpty {
                print("üìã Skop√≠rovan√Ω text: \(copiedText)")
            } else {
                print("‚ö†Ô∏è Nepodarilo sa z√≠ska≈• text.")
            }
        }
    }
}
