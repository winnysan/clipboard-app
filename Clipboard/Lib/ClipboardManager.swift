import Cocoa
import Combine

/// Trieda zodpovedn√° za manipul√°ciu so schr√°nkou.
/// Obsahuje funkcie na z√≠skanie oznaƒçen√©ho textu, spr√°vu hist√≥rie kop√≠rovania a v√Ωpis vybran√©ho textu.
class ClipboardManager: ObservableObject {
    /// Singleton in≈°tancia triedy
    static let shared = ClipboardManager()

    /// Maxim√°lny poƒçet polo≈æiek v hist√≥rii
    private let maxHistorySize = 100

    /// Hist√≥ria skop√≠rovan√Ωch textov (najnov≈°√≠ na zaƒçiatku)
    @Published var clipboardHistory: [String] = []
    
    /// Pripnut√© polo≈æky, ktor√© sa uchovaj√∫ aj po re≈°tarte aplik√°cie
    @Published var pinnedItems: Set<String> = []
    
    /// Sledovanie syst√©movej schr√°nky
    private var clipboardCheckTimer: Timer?
    private var lastChangeCount: Int = NSPasteboard.general.changeCount
    private var lastWrittenText: String? = nil
    
    /// Cesta k s√∫boru, kde sa bude uklada≈• hist√≥ria
    private let historyFileURL: URL = {
        let directory = FileManager.default.urls(for: .applicationSupportDirectory, in: .userDomainMask).first!
        
        // Vytvor√≠me vlastn√Ω prieƒçinok pre aplik√°ciu
        let appDirectory = directory.appendingPathComponent("MyClipboardApp", isDirectory: true)

        if !FileManager.default.fileExists(atPath: appDirectory.path) {
            do {
                try FileManager.default.createDirectory(at: appDirectory, withIntermediateDirectories: true, attributes: nil)
            } catch {
                appLog("‚ùå Chyba pri vytv√°ran√≠ prieƒçinka: \(error.localizedDescription)", level: .error)
            }
        }

        let filePath = appDirectory.appendingPathComponent("clipboard_history.json")

        // Logovanie kompletnej cesty v termin√°lovom form√°te
        appLog("üìÇ S√∫bor hist√≥rie: \"\(filePath.path)\"", level: .info)

        return filePath
    }()

    /// Priv√°tny inicializ√°tor zabra≈àuj√∫ci vytvoreniu ƒèal≈°√≠ch in≈°tanci√≠.
    private init() {
        loadHistory()
    }

    /// Skop√≠ruje alebo vystrihne oznaƒçen√Ω text zo syst√©mu, ulo≈æ√≠ ho do hist√≥rie a zobraz√≠ okno aplik√°cie.
    /// - Parameter cut: Ak je true, vykon√° vystrihnutie (Cmd + X). Inak kop√≠rovanie (Cmd + C).
    func copySelectedText(cut: Bool = false) {
        let pasteboard = NSPasteboard.general

        if cut {
            KeyboardManager.simulateCmdX()
        } else {
            KeyboardManager.simulateCmdC()
        }

        // Po kr√°tkom ƒçase preƒç√≠tame obsah schr√°nky a spracujeme ho
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            if let copiedText = pasteboard.string(forType: .string), !copiedText.isEmpty {
                if cut {
                    appLog("üìã Vystrihnut√Ω text: \(copiedText)", level: .info)
                } else {
                    appLog("üìã Skop√≠rovan√Ω text: \(copiedText)", level: .info)
                }

                // Skontrolujeme, ƒçi u≈æ existuje v hist√≥rii a odstr√°nime ho
                self.clipboardHistory.removeAll { $0 == copiedText }

                // Prid√°me ho na zaƒçiatok hist√≥rie
                self.clipboardHistory.insert(copiedText, at: 0)

                // Ak je pripnut√Ω, ost√°va pripnut√Ω a ulo≈æ√≠me ho do JSON
                if self.pinnedItems.contains(copiedText) {
                    self.saveHistory()
                }

                // Zabezpeƒç√≠me, ≈æe hist√≥ria nepresiahne maxim√°lny limit
                if self.clipboardHistory.count > self.maxHistorySize {
                    self.clipboardHistory.removeLast()
                }

                // Ak je povolen√© "Otvori≈• okno pri kop√≠rovan√≠", zobraz√≠me ho
                if StatusBarManager.shared.openWindowOnCopy {
                    WindowManager.shared.openWindow()
                }
            } else {
                appLog("‚ö†Ô∏è Nepodarilo sa z√≠ska≈• text.", level: .warning)
            }
        }
    }
    
    /// Vlo≈æ√≠ zadan√Ω text alebo najnov≈°√≠ text z hist√≥rie na miesto kurzora.
    /// - Parameter text: Voliteƒæn√Ω parameter. Ak nie je zadan√Ω, pou≈æije sa posledn√Ω text z hist√≥rie.
    func pasteText(_ text: String? = nil) {
         let pasteboard = NSPasteboard.general
 
         // Ak nie je zadan√Ω text, pou≈æijeme posledn√Ω text z hist√≥rie.
         guard let textToPaste = text ?? clipboardHistory.first else {
            appLog("‚ö†Ô∏è Nie je k dispoz√≠cii ≈æiadny text na vlo≈æenie.", level: .warning)
            return
        }

        pasteboard.clearContents()
        pasteboard.setString(textToPaste, forType: .string)
        lastWrittenText = textToPaste

        // Simul√°cia Cmd + V na vlo≈æenie textu
        let source = CGEventSource(stateID: .hidSystemState)
        let cmdDown = CGEvent(keyboardEventSource: source, virtualKey: 0x37, keyDown: true) // Command
        let vDown = CGEvent(keyboardEventSource: source, virtualKey: 0x09, keyDown: true) // V
        let vUp = CGEvent(keyboardEventSource: source, virtualKey: 0x09, keyDown: false)
        let cmdUp = CGEvent(keyboardEventSource: source, virtualKey: 0x37, keyDown: false)

        cmdDown?.flags = .maskCommand
        vDown?.flags = .maskCommand
        
        // Uchovanie p√¥vodn√©ho fokusu pred vlo≈æen√≠m textu.
        WindowManager.shared.preserveFocusBeforeOpening()

        cmdDown?.post(tap: .cghidEventTap)
        vDown?.post(tap: .cghidEventTap)
        vUp?.post(tap: .cghidEventTap)
        cmdUp?.post(tap: .cghidEventTap)
        
        // Obnovenie p√¥vodn√©ho fokusu po vlo≈æen√≠ textu.
        WindowManager.shared.restorePreviousFocus()

        appLog("üìã Vlo≈æen√Ω text: \(textToPaste)", level: .info)
        
        // Ak je povolen√© "Zatvori≈• okno pri vlo≈æen√≠", zatvor√≠me ho
        if StatusBarManager.shared.closeWindowOnPaste {
            WindowManager.shared.closeWindow()
        }
    }
    
    /// Ulo≈æ√≠ **iba pripnut√© polo≈æky** do JSON s√∫boru
    private func saveHistory() {
        let data: [String: Any] = [
            "pinnedItems": Array(pinnedItems) // Uklad√°me len pripnut√© polo≈æky
        ]
        do {
            let jsonData = try JSONSerialization.data(withJSONObject: data, options: .prettyPrinted)
            try jsonData.write(to: historyFileURL)
        } catch {
            appLog("‚ùå Chyba pri ukladan√≠ hist√≥rie: \(error.localizedDescription)", level: .error)
        }
    }

    /// Naƒç√≠ta hist√≥riu, **ale iba pripnut√© polo≈æky**
    private func loadHistory() {
        guard FileManager.default.fileExists(atPath: historyFileURL.path) else { return }
        do {
            let jsonData = try Data(contentsOf: historyFileURL)
            if let data = try JSONSerialization.jsonObject(with: jsonData, options: []) as? [String: Any] {
                if let savedPinnedItems = data["pinnedItems"] as? [String] {
                    pinnedItems = Set(savedPinnedItems)
                    clipboardHistory = savedPinnedItems // Naƒç√≠tame len pripnut√©
                }
            }
        } catch {
            appLog("‚ùå Chyba pri naƒç√≠tan√≠ hist√≥rie: \(error.localizedDescription)", level: .error)
        }
    }
    
    /// Oznaƒç√≠ alebo odznaƒç√≠ text ako pripnut√Ω
    func togglePin(_ text: String) {
        if pinnedItems.contains(text) {
            pinnedItems.remove(text) // Odstr√°nime z pripnut√Ωch
        } else {
            pinnedItems.insert(text) // Prid√°me medzi pripnut√©
        }

        // Ulo≈æ√≠me len pripnut√© polo≈æky do JSON-u, ale `clipboardHistory` ostane nezmenen√©
        saveHistory()
    }
    
    /// Odstr√°ni polo≈æku zo zoznamu aj z pripnut√Ωch
    func removeItem(_ text: String) {
        clipboardHistory.removeAll { $0 == text } // Odstr√°ni z hist√≥rie
        pinnedItems.remove(text) // Odstr√°ni z pripnut√Ωch
        saveHistory() // Ulo≈æ√≠me len pripnut√© polo≈æky
    }
    
    /// Spust√≠ sledovanie zmien v syst√©movej schr√°nke
    func startMonitoringClipboard() {
        clipboardCheckTimer = Timer.scheduledTimer(withTimeInterval: 0.5, repeats: true) { _ in
            let pasteboard = NSPasteboard.general
            let currentChangeCount = pasteboard.changeCount

            if currentChangeCount != self.lastChangeCount {
                self.lastChangeCount = currentChangeCount

                if let newText = pasteboard.string(forType: .string), !newText.isEmpty {
                    if newText == self.lastWrittenText {
                        appLog("üîÅ Preskoƒçen√©: vlo≈æen√Ω text je n√°≈° vlastn√Ω", level: .debug)
                        self.lastWrittenText = nil
                        return
                    }

                    appLog("üì• Zisten√° nov√° polo≈æka v schr√°nke: \(newText)", level: .info)
                    self.clipboardHistory.removeAll { $0 == newText }
                    self.clipboardHistory.insert(newText, at: 0)

                    if self.pinnedItems.contains(newText) {
                        self.saveHistory()
                    }

                    if self.clipboardHistory.count > self.maxHistorySize {
                        self.clipboardHistory.removeLast()
                    }

                    if StatusBarManager.shared.openWindowOnCopy {
                        WindowManager.shared.openWindow()
                    }
                }
            }
        }

        RunLoop.main.add(clipboardCheckTimer!, forMode: .common)
        appLog("üîÑ Spusten√© sledovanie syst√©movej schr√°nky", level: .info)
    }
    
    /// Zastav√≠ sledovanie zmien v syst√©movej schr√°nke.
    func stopMonitoringClipboard() {
        clipboardCheckTimer?.invalidate()
        clipboardCheckTimer = nil
        appLog("üõë Sledovanie syst√©movej schr√°nky bolo zastaven√©", level: .info)
    }
}
