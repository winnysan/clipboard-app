import Cocoa
import Combine

/// Hlavn√Ω deleg√°t aplik√°cie, ktor√Ω inicializuje a spravuje jej ≈æivotn√Ω cyklus.
/// Zodpoved√° za po≈æiadanie opr√°vnen√≠, spustenie sledovania kl√°vesov√Ωch skratiek,
/// inicializ√°ciu hlavn√©ho okna aplik√°cie (`WindowManager`) a spr√°vu stavovej li≈°ty (`StatusBarManager`).
class AppDelegate: NSObject, NSApplicationDelegate {
    /// Spr√°vca sledovania kl√°vesov√Ωch skratiek.
    private var keyboardManager: KeyboardManager?

    /// Spr√°vca syst√©mov√Ωch opr√°vnen√≠.
    private let systemPermissionManager = SystemPermissionManager.shared

    /// Uklad√° `AnyCancellable` objekty pre sledovanie zmien opr√°vnenia.
    private var cancellables = Set<AnyCancellable>()

    /// Vol√° sa pri spusten√≠ aplik√°cie a inicializuje potrebn√© slu≈æby.
    /// - Parameter aNotification: Syst√©mov√° notifik√°cia pri ≈°tarte aplik√°cie.
    func applicationDidFinishLaunching(_ aNotification: Notification) {
        // Inicializ√°cia a konfigur√°cia hlavn√©ho okna aplik√°cie.
        WindowManager.shared.configureWindow()
        
        // Inicializ√°cia stavovej li≈°ty.
        StatusBarManager.shared.setupStatusBar()
        
        appLog("‚úÖ Aplik√°cia spusten√° na pozad√≠.", level: .info)

        // Automaticky po≈æiada pou≈æ√≠vateƒæa o povolenie spustenia pri ≈°tarte, ak nie je nastaven√©.
        LaunchManager.shared.requestLaunchAtStartup()

        // Po≈æiadavka na opr√°vnenia pre Accessibility API
        systemPermissionManager.requestAccessibilityPermission()
        
        // Spust√≠me sledovanie opr√°vnen√≠ a zabezpeƒç√≠me, ≈æe kl√°vesov√© skratky sa aktivuj√∫ po ich udelen√≠
        systemPermissionManager.startMonitoringPermission()

        // Pri zmene opr√°vnen√≠ okam≈æite aktualizujeme stav kl√°vesov√Ωch skratiek
        systemPermissionManager.$hasPermission.sink { hasPermission in
            if hasPermission {
                if self.keyboardManager == nil {
                    self.keyboardManager = KeyboardManager()
                    appLog("‚å®Ô∏è Sledovanie kl√°vesov√Ωch skratiek bolo spusten√©.", level: .info)
                }
            } else {
                self.keyboardManager = nil
                appLog("‚ö†Ô∏è Kl√°vesov√© skratky boli deaktivovan√© kv√¥li ch√Ωbaj√∫cim opr√°vneniam.", level: .warning)
            }
        }
        .store(in: &cancellables)
    }

    /// Vol√° sa pri ukonƒçen√≠ aplik√°cie a uvoƒæ≈àuje zdroje.
    /// - Parameter aNotification: Syst√©mov√° notifik√°cia pri ukonƒçen√≠ aplik√°cie.
    func applicationWillTerminate(_ aNotification: Notification) {
        keyboardManager = nil
        systemPermissionManager.stopMonitoringPermission() // Ukonƒç√≠ sledovanie opr√°vnen√≠
        appLog("üö™ Aplik√°cia bola ukonƒçen√°.", level: .info)
    }
}
