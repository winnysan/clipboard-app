import Cocoa

/// Hlavn√Ω deleg√°t aplik√°cie, ktor√Ω inicializuje a spravuje jej ≈æivotn√Ω cyklus.
/// Zodpoved√° za po≈æiadanie opr√°vnen√≠ a spustenie sledovania kl√°vesov√Ωch skratiek.
class AppDelegate: NSObject, NSApplicationDelegate {
    /// Spr√°vca sledovania kl√°vesov√Ωch skratiek
    private var keyboardManager: KeyboardManager?

    /// Spr√°vca syst√©mov√Ωch opr√°vnen√≠
    private let systemPermissionManager = SystemPermissionManager()

    /// Vol√° sa pri spusten√≠ aplik√°cie a inicializuje potrebn√© slu≈æby.
    /// - Parameter aNotification: Syst√©mov√° notifik√°cia pri ≈°tarte aplik√°cie.
    func applicationDidFinishLaunching(_ aNotification: Notification) {
        print("‚úÖ Aplik√°cia spusten√° na pozad√≠.")

        // Po≈æiadavka na opr√°vnenia pre Accessibility API
        systemPermissionManager.requestAccessibilityPermission()

        // Spustenie sledovania kl√°vesov (iba ak m√°me opr√°vnenia)
        if systemPermissionManager.hasAccessibilityPermission() {
            keyboardManager = KeyboardManager()
            print("‚å®Ô∏è Sledovanie kl√°vesov√Ωch skratiek bolo spusten√©.")
        } else {
            print("‚ö†Ô∏è Kl√°vesov√© skratky nebud√∫ fungova≈•, k√Ωm neudel√≠te opr√°vnenie v Nastaveniach.")
        }
    }

    /// Vol√° sa pri ukonƒçen√≠ aplik√°cie a uvoƒæ≈àuje zdroje.
    /// - Parameter aNotification: Syst√©mov√° notifik√°cia pri ukonƒçen√≠ aplik√°cie.
    func applicationWillTerminate(_ aNotification: Notification) {
        keyboardManager = nil
        print("üö™ Aplik√°cia bola ukonƒçen√°.")
    }
}
