import Cocoa

/// Trieda na spr√°vu syst√©mov√Ωch opr√°vnen√≠ pre aplik√°ciu.
/// Obsahuje funkciu na otvorenie nastaven√≠ pre Accessibility.
class SystemPermissionManager {
    /// Skontroluje, ƒçi m√° aplik√°cia povolenie na sledovanie kl√°vesnice.
    /// - Returns: `true`, ak m√° aplik√°cia povolenie, inak `false`.
    func hasAccessibilityPermission() -> Bool {
        return AXIsProcessTrusted()
    }

    /// Otvor√≠ syst√©mov√© nastavenia pre udelenie opr√°vnenia v **Privacy & Security > Accessibility**.
    func requestAccessibilityPermission() {
        appLog("üîì Kontrola opr√°vnenia na sledovanie kl√°vesnice...", level: .info)

        if hasAccessibilityPermission() {
            appLog("‚úÖ Aplik√°cia u≈æ m√° po≈æadovan√© opr√°vnenie.", level: .info)
            return
        }
        
        if !hasAccessibilityPermission() {
            let alert = NSAlert()
            alert.messageText = NSLocalizedString("accessibility_permission_required", comment: "Opr√°vnenie po≈æadovan√©")
            alert.informativeText = NSLocalizedString("accessibility_permission_message", comment: "Aplik√°cia potrebuje opr√°vnenie na sledovanie kl√°vesov√Ωch skratiek.")
            alert.addButton(withTitle: "OK")
            alert.runModal()
        }

        appLog("‚ö†Ô∏è Aplik√°cia nem√° opr√°vnenie. Otv√°ram syst√©mov√© nastavenia...", level: .warning)

        if let url = URL(string: "x-apple.systempreferences:com.apple.preference.security?Privacy_Accessibility") {
            NSWorkspace.shared.open(url)
        } else {
            appLog("‚ùå Nepodarilo sa otvori≈• syst√©mov√© nastavenia. Skontrolujte opr√°vnenia manu√°lne.", level: .error)
        }
        
        // Po≈æiada o opr√°vnenie a zaƒçne sledova≈• zmeny v povoleniach
        DispatchQueue.global(qos: .background).async {
            self.monitorPermissionChanges()
        }
    }
    
    /// Sleduje, ƒçi bolo opr√°vnenie udelen√©, a po jeho z√≠skan√≠ re≈°tartuje aplik√°ciu.
    private func monitorPermissionChanges() {
        while !hasAccessibilityPermission() {
            sleep(1) // ƒåak√° jednu sekundu a znova kontroluje
        }

        appLog("üîÑ Opr√°vnenie udelen√©! Re≈°tartujem aplik√°ciu...", level: .info)
        restartApplication()
    }

    /// Re≈°tartuje aplik√°ciu.
    private func restartApplication() {
        let task = Process()
        task.launchPath = "/usr/bin/open"
        task.arguments = ["-n", Bundle.main.bundlePath]
        task.launch()

        // Ukonƒç√≠ aktu√°lnu in≈°tanciu aplik√°cie
        DispatchQueue.main.async {
            NSApp.terminate(nil)
        }
    }
}
