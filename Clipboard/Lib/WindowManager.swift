import AppKit
import SwiftUI

/// Singleton trieda na spr√°vu hlavn√©ho okna aplik√°cie.
class WindowManager: BaseWindowManager {
    /// Zdieƒæan√° in≈°tancia triedy (Singleton).
    static let shared = WindowManager()

    /// Predch√°dzaj√∫ca akt√≠vna aplik√°cia (pre zachovanie fokusu).
    private var previousApp: NSRunningApplication?

    /// Timer na sledovanie zmeny akt√≠vnej aplik√°cie.
    private var focusTrackingTimer: Timer?

    /// Priv√°tny inicializ√°tor zabra≈àuj√∫ci vytvoreniu ƒèal≈°√≠ch in≈°tanci√≠.
    private init() {
        super.init(size: NSSize(width: 300, height: 400))
    }

    /// Konfiguruje hlavn√© okno aplik√°cie s vizu√°lnymi vlastnos≈•ami a rozlo≈æen√≠m.
    func configureWindow() {
        show { _ in
            ContentView()
        }
        close() // Skry≈• okno po vytvoren√≠
    }

    /// Zobraz√≠ alebo skryje okno aplik√°cie a spust√≠ sledovanie fokusu.
    func toggleWindow() {
        guard let window = window else { return }

        if window.isVisible {
            closeWindow()
        } else {
            preserveFocusBeforeOpening()
            window.makeKeyAndOrderFront(nil) // Zobrazi≈• okno
            startFocusTracking() // Zaƒça≈• sledovanie akt√≠vnej aplik√°cie
        }
    }

    /// Otvor√≠ okno aplik√°cie a spust√≠ sledovanie fokusu.
    func openWindow() {
        guard let window = window, !window.isVisible else { return }

        preserveFocusBeforeOpening()
        window.makeKeyAndOrderFront(nil) // Zobrazi≈• okno
        startFocusTracking()
    }

    /// Zatvor√≠ okno aplik√°cie a zastav√≠ sledovanie fokusu.
    func closeWindow() {
        close() // Zavrie okno
        stopFocusTracking()
    }

    /// Ulo≈æ√≠ aktu√°lnu akt√≠vnu aplik√°ciu pred otvoren√≠m okna aplik√°cie.
    func preserveFocusBeforeOpening() {
        guard let currentApp = NSWorkspace.shared.frontmostApplication,
              currentApp.bundleIdentifier != Bundle.main.bundleIdentifier
        else {
            appLog("‚ö†Ô∏è Fokus nebol ulo≈æen√Ω, aktu√°lne sme u≈æ v aplik√°cii Clipboard.", level: .warning)
            return
        }

        previousApp = currentApp
        appLog("üîπ P√¥vodn√° akt√≠vna aplik√°cia: \(previousApp?.localizedName ?? "Nezn√°ma aplik√°cia")", level: .info)
    }

    /// Obnov√≠ predch√°dzaj√∫cu aplik√°ciu ako akt√≠vnu.
    func restorePreviousFocus() {
        guard let app = previousApp else { return }
        let success = app.activate(options: [])
        appLog(success ? "‚úÖ Fokus obnoven√Ω na: \(app.localizedName ?? "Nezn√°ma aplik√°cia")" : "‚ùå Nepodarilo sa obnovi≈• fokus.", level: success ? .info : .error)
    }

    /// Spust√≠ sledovanie aktu√°lnej akt√≠vnej aplik√°cie na pozad√≠.
    private func startFocusTracking() {
        focusTrackingTimer?.invalidate() // Zru≈°√≠ predch√°dzaj√∫ci timer, ak existuje

        focusTrackingTimer = Timer.scheduledTimer(withTimeInterval: 0.5, repeats: true) { _ in
            guard let currentApp = NSWorkspace.shared.frontmostApplication else { return }
            if currentApp.bundleIdentifier != Bundle.main.bundleIdentifier {
                self.previousApp = currentApp
                appLog("üîÑ Aktualizovan√Ω fokus na: \(currentApp.localizedName ?? "Nezn√°ma aplik√°cia")", level: .debug)
            }
        }
    }

    /// Zastav√≠ sledovanie akt√≠vnej aplik√°cie.
    private func stopFocusTracking() {
        focusTrackingTimer?.invalidate()
        focusTrackingTimer = nil
    }
}
