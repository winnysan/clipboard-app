import AppKit

/// Spr√°va ikonky na stavovej li≈°te aplik√°cie.
/// Umo≈æ≈àuje interakciu s aplik√°ciou cez ikonku v `NSStatusBar`.
class StatusBarManager {
    /// Singleton in≈°tancia pre spr√°vu stavovej li≈°ty.
    static let shared = StatusBarManager()
    
    /// Referencia na polo≈æku stavovej li≈°ty.
    private var statusItem: NSStatusItem?

    /// Ukladanie preferenci√≠ pou≈æ√≠vateƒæa
    private let defaults = UserDefaults.standard

    /// Kƒæ√∫ƒç pre nastavenie "Otvori≈• okno pri kop√≠rovan√≠"
    private let openWindowOnCopyKey = "openWindowOnCopy"

    /// Hodnota pre "Otvori≈• okno pri kop√≠rovan√≠"
    var openWindowOnCopy: Bool {
        get { defaults.bool(forKey: openWindowOnCopyKey) }
        set { defaults.set(newValue, forKey: openWindowOnCopyKey) }
    }

    /// Priv√°tny inicializ√°tor zabra≈àuj√∫ci vytvoreniu ƒèal≈°√≠ch in≈°tanci√≠.
    private init() {}

    /// Inicializuje ikonku v stavovej li≈°te a nastav√≠ akcie.
    func setupStatusBar() {
        statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.variableLength)
        
        if let button = statusItem?.button {
            button.image = NSImage(systemSymbolName: "clipboard", accessibilityDescription: "Clipboard")
            button.action = #selector(statusBarButtonClicked)
            button.target = self
            button.sendAction(on: [.leftMouseUp, .rightMouseUp]) // Povolenie akci√≠ na ƒæav√© aj prav√© tlaƒçidlo
        }
    }
    
    /// Akcia pri kliknut√≠ na ikonku stavovej li≈°ty - zobraz√≠ alebo skryje okno aplik√°cie.
    @objc private func statusBarButtonClicked(_ sender: NSStatusBarButton) {
        let event = NSApp.currentEvent

        if event?.type == .rightMouseUp {
            showContextMenu() // Kliknutie prav√Ωm tlaƒçidlom ‚Üí zobraz√≠ menu
        } else {
            WindowManager.shared.toggleWindow() // Kliknutie ƒæav√Ωm tlaƒçidlom ‚Üí otvor√≠/zatvor√≠ okno
        }
    }
    
    /// Zobraz√≠ kontextov√© menu pri kliknut√≠ prav√Ωm tlaƒçidlom na ikonku stavovej li≈°ty.
    private func showContextMenu() {
        let menu = NSMenu()
        
        // Polo≈æka "O aplik√°cii"
        let aboutItem = NSMenuItem(
            title: NSLocalizedString("about_app", comment: "O aplik√°cii"),
            action: #selector(showAboutWindow),
            keyEquivalent: ""
        )
        aboutItem.target = self

        // Polo≈æka "Otvori≈• okno pri kop√≠rovan√≠"
        let openWindowItem = NSMenuItem(
            title: NSLocalizedString("open_window_on_copy", comment: "Otvori≈• okno pri kop√≠rovan√≠"),
            action: #selector(toggleOpenWindowOnCopy),
            keyEquivalent: ""
        )
        openWindowItem.target = self
        openWindowItem.state = openWindowOnCopy ? .on : .off

        // Polo≈æka "Spusti≈• pri ≈°tarte"
        let launchAtStartupItem = NSMenuItem(
            title: NSLocalizedString("start_at_login", comment: "Tlaƒçidlo na povolenie spustenia aplik√°cie pri prihlasen√≠"),
            action: #selector(toggleLaunchAtStartup),
            keyEquivalent: ""
        )
        launchAtStartupItem.target = self
        launchAtStartupItem.state = LaunchManager.shared.isLaunchAtStartupEnabled() ? .on : .off

        menu.addItem(aboutItem)
        menu.addItem(.separator()) // Oddelovaƒç
        menu.addItem(openWindowItem)
        menu.addItem(launchAtStartupItem)
        menu.addItem(.separator()) // Oddelovaƒç

        // Polo≈æka "Ukonƒçi≈• aplik√°ciu"
        let quitItem = NSMenuItem(
            title: NSLocalizedString("quit", comment: "Tlaƒçidlo na ukonƒçenie aplik√°cie"),
            action: #selector(quitApp),
            keyEquivalent: ""
        )
        quitItem.target = self
        menu.addItem(quitItem)
        
        statusItem?.menu = menu
        statusItem?.button?.performClick(nil) // Simuluje kliknutie na ikonu pre zobrazenie menu
        statusItem?.menu = nil // Po kliknut√≠ na polo≈æku menu resetuje menu, aby neboli vizu√°lne chyby
    }

    /// Prepne stav "Otvori≈• okno pri kop√≠rovan√≠"
    @objc private func toggleOpenWindowOnCopy() {
        openWindowOnCopy.toggle()
        appLog("üîÑ Otvori≈• okno pri kop√≠rovan√≠: \(openWindowOnCopy ? "Zapnut√©" : "Vypnut√©")", level: .info)
    }
    
    /// Prepne stav automatick√©ho sp√∫≈°≈•ania aplik√°cie pri ≈°tarte syst√©mu.
    @objc private func toggleLaunchAtStartup() {
        let isEnabled = LaunchManager.shared.isLaunchAtStartupEnabled()
        LaunchManager.shared.setLaunchAtStartup(!isEnabled)
    }
    
    /// Ukonƒç√≠ aplik√°ciu.
    @objc private func quitApp() {
        appLog("üö™ Aplik√°cia bola ukonƒçen√°.", level: .info)
        NSApp.terminate(nil)
    }
    
    /// Zobraz√≠ okno "O aplik√°cii"
    @objc private func showAboutWindow() {
         let appVersion = Bundle.main.object(forInfoDictionaryKey: "CFBundleShortVersionString") as? String ?? "Unknown"
         let informativeText = String(format: NSLocalizedString("informative_text", comment: "Inform√°cie o aplik√°cii"), appVersion)
         
         let alert = NSAlert()
         alert.messageText = NSLocalizedString("clipboard_app_title", comment: "Nadpis aplik√°cie")
         alert.informativeText = informativeText
         alert.alertStyle = .informational
         alert.addButton(withTitle: "OK")
         alert.runModal()
    }
}
